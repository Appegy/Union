using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using static Appegy.Union.Generator.AttributesNames;

namespace Appegy.Union.Generator;

[Generator]
public class UnionAttributeGenerator : IIncrementalGenerator
{
    private static ImmutableArray<TypePartRegion<UnionAttributePartInput>> Regions { get; } =
        ImmutableArray.Create<TypePartRegion<UnionAttributePartInput>>(
            new UnionTypeEnumRegion(),
            new UnionFieldsRegion(),
            new UnionPropertiesRegion(),
            new UnionConstructorsRegion(),
            new UnionToStringRegion(),
            new UnionGetHashCodeRegion(),
            new UnionEqualsRegion(),
            new UnionOperatorsRegion(),
            new UnionComparisonRegion());

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var sources = context
            .SyntaxProvider
            .ForAttributeWithMetadataName(
                UnionAttributeName,
                predicate: static (syntax, _) => syntax is StructDeclarationSyntax,
                transform: static (ctx, _) =>
                {
                    var syntax = (StructDeclarationSyntax)ctx.TargetNode;
                    var attribute = ctx.Attributes.First();
                    var types = attribute.GetTypesFromConstructor(TypeKind.Struct);
                    return (syntax, types);
                });

        context.RegisterSourceOutput(sources, static (ctx, input) =>
        {
            var (syntax, types) = input;

            if (!syntax.Modifiers.Any(SyntaxKind.PartialKeyword))
            {
                return;
            }

            if (types.Count == 0)
            {
                return;
            }

            using var memoryStream = new MemoryStream();
            using var streamWriter = new StreamWriter(memoryStream, Encoding.UTF8);
            using var codeWriter = new IndentedTextWriter(streamWriter, "    ");

            GenerateHeader(codeWriter, syntax);
            GenerateDeclaration(codeWriter, syntax, types);

            var regionInput = new UnionAttributePartInput(syntax, types);
            foreach (var region in Regions)
            {
                region.Generate(codeWriter, regionInput);
            }

            GenerateStructureClose(codeWriter, syntax);

            streamWriter.Flush();
            ctx.AddSource($"{syntax.Identifier.Text}_Union.g.cs", SourceText.From(memoryStream, Encoding.UTF8, canBeEmbedded: true));
        });
    }

    private static void GenerateHeader(IndentedTextWriter codeWriter, StructDeclarationSyntax syntax)
    {
        codeWriter.WriteLine("// <auto-generated/>");
        codeWriter.WriteLine("using System;");
        codeWriter.WriteLine("using System.Runtime.InteropServices;");
        codeWriter.WriteLine();

        if (syntax.Parent is NamespaceDeclarationSyntax namespaceDeclaration)
        {
            codeWriter.Write("namespace ");
            codeWriter.WriteLine(namespaceDeclaration.Name);
            codeWriter.WriteLine('{');
            codeWriter.Indent++;
        }
    }

    private static void GenerateDeclaration(IndentedTextWriter codeWriter, StructDeclarationSyntax syntax, ImmutableList<INamedTypeSymbol> types)
    {
        codeWriter.WriteLine("[StructLayout(LayoutKind.Explicit, Pack = 1)]");
        codeWriter.Write("public partial struct ");
        codeWriter.WriteLine(syntax.Identifier.Text);

        codeWriter.Write("    : System.IEquatable<");
        codeWriter.Write(syntax.Identifier.Text);
        codeWriter.WriteLine(">");

        foreach (var type in types)
        {
            codeWriter.Write("    , System.IEquatable<");
            codeWriter.Write(type.ToDisplayString());
            codeWriter.WriteLine(">");
        }

        codeWriter.WriteLine('{');
        codeWriter.Indent++;
    }

    private static void GenerateStructureClose(IndentedTextWriter codeWriter, StructDeclarationSyntax syntax)
    {
        codeWriter.Indent--;
        codeWriter.WriteLine('}');

        if (syntax.Parent is NamespaceDeclarationSyntax)
        {
            codeWriter.Indent--;
            codeWriter.WriteLine('}');
        }
    }
}